// backend/src/models/userPreferences.js
const DEFAULT_USER_PREFERENCES = {
    // Theme preferences
    theme: {
      mode: 'light', // light, dark, system
      accentColor: 'brand', // brand, blue, green, purple, etc.
      fontSize: 'medium', // small, medium, large
      reducedMotion: false,
      highContrast: false
    },
    
    // Notification preferences
    notifications: {
      email: {
        projectUpdates: true,
        planGeneration: true,
        commentMentions: true,
        weeklyDigest: true,
        securityAlerts: true,
        marketingContent: false
      },
      inApp: {
        projectUpdates: true,
        planGeneration: true,
        commentMentions: true,
        securityAlerts: true
      },
      desktop: {
        enabled: false,
        projectUpdates: true,
        planGeneration: true,
        commentMentions: true
      }
    },
    
    // Claude interaction preferences
    claude: {
      conversationStyle: 'balanced', // concise, balanced, detailed
      defaultPlanningTimeframe: 'medium', // short, medium, long
      rememberContext: true,
      suggestFeatures: true,
      autoGenerateDocs: true
    },
    
    // Project display preferences
    projects: {
      defaultView: 'grid', // grid, list
      sortBy: 'updatedAt', // createdAt, updatedAt, name, status
      sortDirection: 'desc', // asc, desc
      showCompleted: true,
      groupBy: 'none' // none, status, priority
    },
    
    // Developer preferences
    developer: {
      codeTheme: 'monokai', // monokai, github, dracula, etc.
      tabSize: 2,
      insertSpaces: true,
      formatOnSave: true,
      defaultLanguage: 'javascript' // javascript, python, typescript, etc.
    },
    
    // Interface preferences
    interface: {
      sidebarCollapsed: false,
      showTips: true,
      compactMode: false,
      useMarkdownEditor: true
    }
  };
  
  /**
   * Validate user preferences against the schema
   * @param {Object} preferences User preferences to validate
   * @returns {Object} Validation result with isValid flag and errors array
   */
  function validatePreferences(preferences) {
    const errors = [];
    
    // Helper function to validate preference sections
    function validateSection(section, schema, path = '') {
      if (!section) return;
      
      // Check for unexpected properties
      Object.keys(section).forEach(key => {
        const currentPath = path ? `${path}.${key}` : key;
        
        if (!schema[key]) {
          errors.push(`Unexpected property: ${currentPath}`);
          return;
        }
        
        const value = section[key];
        const schemaValue = schema[key];
        
        // Recursive validation for nested objects
        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
          validateSection(value, schemaValue, currentPath);
        } else {
          // Validate value types and ranges
          if (typeof value !== typeof schemaValue) {
            errors.push(`Invalid type for ${currentPath}: expected ${typeof schemaValue}, got ${typeof value}`);
          } else if (typeof value === 'string' && 
                    Array.isArray(ENUM_VALUES[currentPath]) && 
                    !ENUM_VALUES[currentPath].includes(value)) {
            errors.push(`Invalid value for ${currentPath}: must be one of ${ENUM_VALUES[currentPath].join(', ')}`);
          }
        }
      });
    }
    
    // Validate each top-level section
    Object.keys(preferences).forEach(section => {
      if (DEFAULT_USER_PREFERENCES[section]) {
        validateSection(preferences[section], DEFAULT_USER_PREFERENCES[section], section);
      } else {
        errors.push(`Unexpected section: ${section}`);
      }
    });
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  
  // Enum values for string preferences
  const ENUM_VALUES = {
    'theme.mode': ['light', 'dark', 'system'],
    'theme.accentColor': ['brand', 'blue', 'green', 'purple', 'red', 'orange', 'pink'],
    'theme.fontSize': ['small', 'medium', 'large'],
    'claude.conversationStyle': ['concise', 'balanced', 'detailed'],
    'claude.defaultPlanningTimeframe': ['short', 'medium', 'long'],
    'projects.defaultView': ['grid', 'list'],
    'projects.sortBy': ['createdAt', 'updatedAt', 'name', 'status'],
    'projects.sortDirection': ['asc', 'desc'],
    'projects.groupBy': ['none', 'status', 'priority'],
    'developer.codeTheme': ['monokai', 'github', 'dracula', 'solarized', 'twilight']
  };
  
  /**
   * Merge provided preferences with defaults
   * @param {Object} preferences User preferences to merge
   * @returns {Object} Merged preferences
   */
  function mergeWithDefaults(preferences) {
    return deepMerge({}, DEFAULT_USER_PREFERENCES, preferences);
  }
  
  /**
   * Deep merge utility function
   * @param {Object} target Target object
   * @param {...Object} sources Source objects
   * @returns {Object} Merged object
   */
  function deepMerge(target, ...sources) {
    if (!sources.length) return target;
    const source = sources.shift();
  
    if (isObject(target) && isObject(source)) {
      for (const key in source) {
        if (isObject(source[key])) {
          if (!target[key]) Object.assign(target, { [key]: {} });
          deepMerge(target[key], source[key]);
        } else {
          Object.assign(target, { [key]: source[key] });
        }
      }
    }
  
    return deepMerge(target, ...sources);
  }
  
  /**
   * Check if value is an object
   * @param {*} item Value to check
   * @returns {boolean} Is object
   */
  function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
  }
  
  module.exports = {
    DEFAULT_USER_PREFERENCES,
    validatePreferences,
    mergeWithDefaults
  };